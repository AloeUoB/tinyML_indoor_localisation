program: tinyML_indoor_localisation/playspace.py

method: bayes

metric:
  name: macro_f1
  goal: maximize

parameters:
  learning_rate:
    distribution: uniform
    min: 0.0001
    max: 0.1

  model_option:
    values: [ 'mlp', 'cnn' ]

  num_layers:
      values: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]

  layer_size_1:
      values: [ 32, 64, 128, 256, 512, 1024]
  layer_size_2:
      values: [ 32, 64, 128, 256, 512, 1024 ]
  layer_size_3:
      values: [ 32, 64, 128, 256, 512, 1024 ]
  layer_size_4:
      values: [ 32, 64, 128, 256, 512, 1024 ]
  layer_size_5:
      values: [ 32, 64, 128, 256, 512, 1024 ]
  layer_size_6:
      values: [ 32, 64, 128, 256, 512, 1024 ]
  layer_size_7:
      values: [ 32, 64, 128, 256, 512, 1024 ]
  layer_size_8:
      values: [ 32, 64, 128, 256, 512, 1024 ]
  layer_size_9:
      values: [ 32, 64, 128, 256, 512, 1024 ]
  layer_size_10:
      values: [ 32, 64, 128, 256, 512, 1024 ]

  pool_size_1:
      values: [ 1, 2, 3, 4, 5]
  pool_size_2:
      values: [ 1, 2, 3, 4, 5]
  pool_size_3:
      values: [ 1, 2, 3, 4, 5]
  pool_size_4:
      values: [ 1, 2, 3, 4, 5]
  pool_size_5:
      values: [ 1, 2, 3, 4, 5]
  pool_size_6:
      values: [ 1, 2, 3, 4, 5]
  pool_size_7:
      values: [ 1, 2, 3, 4, 5]
  pool_size_8:
      values: [ 1, 2, 3, 4, 5]
  pool_size_9:
      values: [ 1, 2, 3, 4, 5]
  pool_size_10:
      values: [ 1, 2, 3, 4, 5]

  batch_size:  # integers between 32 and 256  with evenly-distributed logarithms
      distribution: q_log_uniform_values
      q: 8
      min: 32
      max: 256

  epochs:
      values: [100, 200, 300, 500, 700, 1000]